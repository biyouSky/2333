
gx库代码编程规范 （不断完善中）


1 未归类部分
1.1 值比较，整数用0，实数用0.0，指针用NULL，字符（串）用'\0'；



2 类部分
2.1 类内部声明顺序如下：
  a. 整体顺序：public、protected、private，如果那一块没有，直接忽略即可；
  b. 每一块中，1) typedefs和enums； 2) 常量； 3) 构造函数； 4) 析构函数； 5) 成员函数，含静态成员函数； 6) 数据成员，含静态数据成员；
  c. 宏DISALLOW_COPY_AND_ASSIGN置于private块后，作为类的最后部分；
  d. cpp文件中函数的定义应尽可能和声明次序一致；
 
2.2 假如构造函数只有一个参数, 使用explicit避免隐式转换, 因为隐式转换可能在你并不需要的时候出现；

2.3 一般的类要禁用拷贝构造函数，详见2.1.c
	#define DISALLOW_COPY_AND_ASSIGN( TypeName ) 				\
					  TypeName( const TypeName& );		\ 
					  void operator=( const TypeName& ) 













总结一下, 这份规范中规避的C++特性大致分为以下几类:
a) 避免使用那些没有确定行为的特性:如全局变量不能是类对象(初始化顺序不确定), 不使用编译器生成的默认构造函数(构造行为不确定), 异常(代码走向不确定).
b) 避免使用那些隐式发生的操作:如声明单参数构造函数为explict以避免隐式转换, 不定义拷贝构造函数避免隐式的拷贝行为, 不使用操作符重载避免隐式的转换
c) 对模棱两可的特性给予明确的规定:不使用函数重载而是定义对每个类型明确的函数.
d) 即使出错了程序也有办法知道: 比如不能在类构造函数中进行复杂的构造操作, 将这些移动到类Init()的函数中.

另对于h和cpp的讨论：
我们知道在java中声明与实现是不分离的，而c++是分h和cpp的，但同时类中函数的实现也可以写到h中，我们怎么写呢？
1 我倾向于极端的方式，实现要么都写到h中要么多写到cpp中，其实我喜欢前者，但前者没法全部这样实现，但后者可以；
2 实现写到h中会作为inline函数，其实这个对于现在的编译器来说问题不大，现在的编译器会自动根据长度来区分是否采取inline，即使人为定义inline，过长的函数inline也是无效的；
综合考虑，不是太繁琐的实现




